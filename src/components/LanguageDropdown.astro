<select id="lang-select"></select>

<script>
    import i18next from "../i18n.js";
    import * as Utils from "../utils/formatters.ts";

    type languageFlags = { [key: string]: string };

    // languageFlags (can be used for mobile)
    // const languageFlags: languageFlags = {
    //     en: "ðŸ‡¬ðŸ‡§",
    //     fr: "ðŸ‡«ðŸ‡·",
    //     es: "ðŸ‡ªðŸ‡¸",
    // };

    const selectClasses = [
        "mr-2",
        "pr-4",
        "hover:text-secondary-20-dark",
        "focus:outline-none",
        "focus:text-primary-10-light",
    ];
    const optionClasses = ["text-black", "text-sm", "hover:bg-neutral-20"];

    // Update all elements that have data-i18n attributes
    function updateContent() {
        document.querySelectorAll("[data-i18n]").forEach((el) => {
            const key = el.getAttribute("data-i18n");
            el.innerHTML = i18next.t(key!);
        });
    }

    function buildLanguageDropdown() {
        const displayNames = new Intl.DisplayNames([i18next.language], {
            type: "language",
        });

        // Dynamic list from config file
        fetch("/locales/languages.json")
            .then((res) => res.json())
            .then((langs) => {
                const select = document.getElementById("lang-select");
                select!.innerHTML = ""; // reset options
                select?.classList.add(...selectClasses);
                langs.forEach((lng: string) => {
                    const option = document.createElement("option");
                    option.value = lng;
                    console.log(lng);
                    option.textContent = `${displayNames.of(lng) || lng.toUpperCase()}`;
                    // `${languageFlags[lng] || ""} ${displayNames.of(lng) || lng.toUpperCase()}`; // display prefixed with languageFlags (can be used for mobile)
                    option.classList.add(...optionClasses);
                    option.textContent = Utils.capitalizeFirstLetter(
                        option.textContent,
                    );
                    if (lng === i18next.language) option.selected = true;
                    select!.appendChild(option);
                });

                // Handle selection change
                select!.addEventListener("change", (e: any) => {
                    i18next.changeLanguage(e.target.value);
                });
            });
    }

    i18next.on("initialized", () => {
        updateContent();
        buildLanguageDropdown();
    });

    i18next.on("languageChanged", () => {
        updateContent();
        buildLanguageDropdown();
    });
</script>
